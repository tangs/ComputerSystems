3.1:
%rax                                                        0x100
0x104                                                       0xAB
$0x108                                                      0x108
(%rax)                                                      0xFF
4(%rax)                                                     0xAB
9(%rax, %rdx)       (9+%rax+%rax*1)=(9+0x104+0x3)=(0x10C)   0x11
260(%rcx, %rdx)     (0x104+0x1+0x3)=(0x108)                 0x13
0xFC(, %rcx, 4)     (0xFC+0x1*4)=(0x100)                    0xFF
(%rax, %rdx, 4)     (0x100+0x3*4)=(0x10C)                   0x11

3.2:
movl
movw
movb
movb
movq
movw

0x0011223344556677
0xAA
0x00112233445566AA
0xFFFFFFFFFFFFFFAA
0x00000000000000AA

3.3:
movl
movq
不能memory--memory
没有sl
目标不能是Immediate
movq
movw

3.4:
rdi edi ei dil
rsi esi si sil
rax eax ax al
char                int             movsbl (%rdi),%eax  movsbl %eax,(%rsi)
char                unsigned        movsbl (%rdi),%eax  movl %eax,(%rsi)
unsigned char       long            movzbq (%rdi),%rax  movq %rax,(%rsi)
int                 char            movb (%rdi),%al     movb %al,(%rsi)
unsigned            unsigned char   movb (%rdi),%al     movb %al,(%rsi)
char                short           movsbw (%rdi),%ax   movw %ax,(%rsi) 

3.5:
void decode1(long *xp, long *yp, long *zp) {
    long a = *xp;
    long b = *yp;
    long c = *zp;
    *yp = a;
    *zp = b;
    *xp = c;
}

3.6:
6 + x
x + y
x + 4y
7 + 9x
10 + 4y
9 + x + 2y

3.7:
5x + 2y + 8z

3.8:
0x100   0x100
0x108   0xA8
0x118   0x110
0x110   0x14
%rcx    0x0
%rax    0xFD

3.9:
salq $4, %rax
sarq %cl, %rax

3.10:
y | x
t1 >> 3
~t2
z - t3

3.11:
A.将%rdx值置为0
B.movq $0, %rdx
C.3个字节和7个字节

3.12:
movq	%rdx, %r8
movq	%rdi, %rax
xor		%rdx, %rdx
divq	%rsi
movq	%rax, (%r8)
movq	%rdx, (%rcx)

3.13:
A   <   int
B   >=  short
C   <=  unsigned char  
D   !=  long or unsigned long or void*

3.14:
A   >=  long 
B   ==  short or unsigned short
C   >   unsigned char
D   !=  int or unsigned int

3.15:
A   4003fe
B   400431-0x0C=400425
C   400543  400545
D   4005ed-8d=400560

3.16:
    void cond(long a, long *p)
    a in %rdi, p in %rsi
    cond:
    testq   %rsi, %rsi          // test q
    je      .L1                 // if 0 goto .L1
    compq   %rdi, (%rsi)        // cmp *p a
    jge     .L1                 // if >= goto .L1
    movq    %rid, (%rsi)        // *q = a
    .L1:
    req: ret                    // return

A.
    void cond(long a, long *p) {
        if (p == 0)
            goto ret;
        if (*p >= a)
            goto ret;
        *p = a;
    ret:
        return;
    }
B.因为C语言中的一个if语句中包含两个条件判断.

3.17:
A.
    long absdiff_se(long x, long y) {
        long result;
        if (x < y)
            goto x_l_y;
        ge_cnt++;
        result = x - y;
        return result;
    x_l_y:
        lt_cnt++;
        result = y - x;
        return result;
    }
B.没想出

3.18:
    test:
        leaq    (%rdi, %rsi), %rax      // val = x + y
        addq    %rdx, %rax              // val += z
        cmpq    $-3, %rdi               // cmp x -3
        jge     .L2                     // if >= goto .L2
        cmpq    %rdx, %rsi              // cmp y z
        jge     .L3                     // if >= goto .L3
        movq    %rdi, %rax              // val = x
        imulq   %rsi, %rax              // val *= y
    .L3:
        movq    %rsi, %rax              // val = y
        imulq   %rdx, %rax              // val *= z
    .L2:
        cmpq    $2, %rdi                // cmp x 2
        jle     .L4                     // if <= goto .L4
        movq    %rdi, %rax              // val = x
        imulq   %rdx, %rax              // val *= z
    .L4:
        req; ret                        // return

    long test(long x, long y, long z) {
        long val = x + y + z;
        if (x < -3) {
            if (y < z)
                val = x * y;
            else
                val = y * z;
        } else if (x > 2)
            val = x * z;
        return val;
    }

3.19:
    Tok = 16 
    Tran =  31 
    A.
        Tmp = 2 * (Tran - Tok) = 30
    B.
        Tran = (Tok + Terr) / 2
        Terr = 2 * Tran - Tok = 2 * 31 - 16 = 46
        Terr = Tok + Tmp = 16 + 30 = 46

3.20:
    ret = x + 7
    x & x
    if (x >= 0)  ret = x
    ret >>= 3

    if (x >= 0)
        ret x >> 3;
    else
        ret (x + 7) >> 3;

    A. OP / 

3.21:
    long test(long x, long y);
    x in %rdi, y in %rsi
  test:
    leaq    0(, %rdi, 8), %rax          // ret = 8 * x
    testq   %rsi, %rsi                  // test y
    jle     .L2                         // if <= jump .L2
    movq    %rsi, %rax                  // ret = y
    subq    %rdi, %rax                  // ret = ret - x
    movq    %rdi, %rdx                  // %rdx = x
    andq    %rsi, %rdx                  // %rdx = rdx & y
    cmpq    %rsi, %rdi                  // cmp x - y
    cmovge  %rdx, %rax                  // if >= ret = %rdx
    ret
  .L2:
    addq    %rsi, %rdi                  // x = x + y
    cmpq    $-2, %rsi                   // cmp y - (-2)
    cmovle  %rdi, %rax                  // if <= ret = x
    ret

    long val = 8 * x;
    if (y > 0) {
        if (x >= y)
            ret = x & y;
        else
            ret = y - x;
    } else if (y <= -2)
        ret = x + y;

3.23:
    C.
        ret = x
        %rcx = x
        %rcx *= x
        %rdx = 2 * x
    .L2:
        ret += %rcx + 1
        %rdx = %rdx - 1
        if (%rdx > 0)
            goto .L2
    A.
        x: %rdi
        y: %rcx
        n: %rdx
    
3.24:
    long loop_while(long a, long b)
    {
        long result = 1;
        while (a < b) {
            result = result * (a + b);
            a = a + 1;
        }
        return reslut;
    }
    
3.25:
    long loop_while2(long a, long b)
    {
        long result = b;
        while (b > 0) {
            reslut *= a;
            b -= a;
        }
        return result;
    }

3.26:
    A. jump to middle
    B.
    long fun_a(unsigned long x) {
        long val = 0;
        while (x != 0) {
            val ^= x;
            x >>= 1;
        }
        return 1 & val;
    }
    C.计算x的二进制位为1的总数是否为奇数.

3.27:
while:
    long fact_for(long n) {
        long result = 1;
        long i = 2;
        while (i <= n) {
            result *= i;
        }
        return result;
    }
guarded-do;
    long fact_for(long n) {
        long result = 1;
        long i = 2;
        if (i > n)
            goto done;
    loop:
        result *= i;
        i += 1; 
        if (i <= n)
            goto loop;
    done:
        return result;
    }

3.28:
    A.
    for (i = 64; i != 0; --i) {
        long y = x & 1;
        val += val; // val <<= 1;
        val |= y;
        x >>= 1;
    }
    B.因为i的初始值保证了第一次条件判断结果肯定为真.
    C.按位翻转.

3.29:
    A.
    long sum = 0;
    long i;
    while (i < 10) {
        if (i & 1)
            continue;
        sum += i;
        i++;
    }
    死循环
    B.
    long sum = 0;
    long i;
    while (i < 10) {
        if (i & 1)
            goto .Update;
        sum += i;
    .Update:
        i++;
    }

3.30:
    A.
    .quad   .L9     // -1
    .quad   .L5     // 0
    .quad   .L6     // 1
    .quad   .L7     // 2
    .quad   .L2     // 
    .quad   .L7     // 4
    .quad   .L8     // 5
    .quad   .L2     // 
    .quad   .L5     // 7
    B.
        0   7
        2   4

3.31:
    void switcher(long a, long b, long c, long *dest) {
        long val;
        switch(a) {
        case 5:
            c = b ^ 15;
        case 0:
            val = 112 + c;
            break;
        case 2:
        case 7:
            val = (b + c) << 2;
            break;
        case 4:
            val = a;
            break;
        default:
            val = b;
        }
        *dest = val;
    }

3.32:
    标号    PC          指令        %rdi        %rsi        %rax    %rsp                *%rsp           描述
    M1      0x400560    callq       10          -           -       0x7fffffffe820      -           调用first(10)   
    F1      0x400548    lea         10          -           -       0x7fffffffe818      0x400565    进入first
    F2      0x40054c    sub         10          11          -       0x7fffffffe818      0x400565    
    F3      0x400550    callq       9           11          -       0x7fffffffe818      0x400565    调用last(9, 11)
    L1      0x400540    mov         9           11          -       0x7fffffffe810      0x400555    进入last
    L2      0x400543    imul        9           11          9       0x7fffffffe810      0x400555
    L3      0x400547    retq        9           11          99      0x7fffffffe810      0x400555    从last中返回99
    F4      0x400555    reqz retq   9           11          99      0x7fffffffe818      0x400565    从first中返回99
    M2      0x400565    mov         9           11          99      0x7fffffffe820      -

3.33:
    %rdi        %rsi        %rdx        %rcx
    a(int)      b(short)    u(long*)     v(char*)

3.34:
    A.a0 a1 a2 a3 a4 a5
    B.a6 a7
    C.被调用者保存寄存器只有6个
    
3.35:
    A.x
    B.
    long rfun(unsigned long x) {
        if (x == 0)
            return 0;
        unsigned long nx = x >> 2;
        long rv = rfun(nx);
        return x + rv;
    }

3.36:
    数组    元素大小    整个数组的大小  起始地址    元素i
    S       2           14          Xs          Xs + i * 2
    T       8           24          Xt          Xt + i * 8
    U       8           48          Xu          Xu + i * 8
    V       4           32          Xv          Xv + i * 4
    W       8           32          Xw          Xw + i * 8

3.37:
    exp         type        value               assembly
    S + 1       short*      Xs + 2              leaq 2(%rdx), %rax
    S[3]        short       M[Xs + 6]           movw 6(%rdx), %ax
    &S[i]       short*      Xs + 2*i            leaq (%rdx, %rcx, 2), %rax
    S[4*i + 1]  short       M[Xs + 8*i + 2]     movw 2(%rdx, %rcx, 8), %rax
    S + i - 5   short*      Xs + 2*i - 10       leaq -10(%rdx, %rcx, 2), %rax

3.38:
    long sum_element(long i, longj)
    i in %rdi, j in %rsi
    sum_element:
        leaq    0(,%rdi,8), %rdx        // %rdx = 8*i
        subq    %rdi, %rdx              // %rdx -= i                = 7*i
        addq    %rsi, %rdx              // %rdx += j                = 7*i +j
        leaq    (%rsi,%rsi,4), %rax     // %rax = 5*j               = 5*j
        addq    %rax, %rdi              // %rdi += %rax             = i + 5*j
        movq    Q(,%rdi,8), %rax        // %rax = M[Q + 8*%rdi]     = 8*(i + 5*j)
        addq    P(,%rdx,8), %rax        // %rax += M[P + 8*%rdx]    += 8*(7*i + j)
        ret
    N = 7
    M = 5
    
3.39:
    等式3.1. &D[i][j] = Xd + L(C*i + j)
    Aptr = &X[i][0] = Xa + 4 * (16 * i + 0) = Xa + 64 * i
    Bptr = &B[0][k] = Xb + 4 * (16 * 0 + k) = Xb + 4 * k
    Bend = &B[N][k] = Xb + 4 * (16 * 16 + k) = Xb + 1024 + 4 * k

3.40:
    void fix_set_diag_opt(fix_matrix A, int val) {
        long i = 0;
        while (i < N * N) {
            *(A + i) = val;
            i += N + 1;
        }
    }

3.41:
    A.
        P: 0
        s.x: 8
        s.y: 12
        next: 16
    B.
        24
    C.
        sp->s.y
        &(sp->s.x)
        sp->p

3.42:
    A.
    long fun(struct ELE *ptr) {
        long ret = 0;
        while (ptr) {
            ret += ptr->v;
            ptr = ptr->p;
        }
        return ret;
    }
    B.
    链表，计算和。

3.43:
    up->t1.v            short       movw 8(%rdi),%ax   movw %ax,(%si)
    &up->t1.w           char*       leaq 10(%rdi),%rax  movq %rax,(%rsi)
    up->t2.a            int*        movq %rdi,(%rsi)
    up->t2.a[up->t1.u]  int         movq (%rdi),%rax    movl (%rdi, %rax, 4),%eax   movl %eax,(%rsi)
    *up->t2.p           char        movq 8(%rdi),%rax   movb (%rax),%al             movb %al,(%sil)

3.44:
    A.
        0(4)    4(1)    8(4)    12(1)   16(4)
        int     char    int     char
    B.
        0(4)    4(1)    5(1)    8(8)    16(8)
        int     char    char    long
    C.
        0(6)        6(3)        10(2)
        short[3]    char[3]
    D.
        0(10)       16(24)       40(8)
        short[5]    char*[3]
    E.
        0(20)           24(16)      40(8)
        struct P3[2]    struct P2

3.45:
    A.
        0(8)        8(2)        16(8)       24(1)       28(4)       32(1)       40(8)       48(4)       56(8)
        a(char*)    b(short)    c(double)   d(char)     e(float)    f(char)     g(long)     h(int)
    B.
        56
    C.
        struct {
            char d;             // 0(1)
            char f;             // 1(1)
            short b;            // 2(2)
            float e;            // 4(4)
            int h;              // 8(4)
            double c;           // 16(8)
            long g;             // 24(8)
            char* a;            // 32(8)
        };
        40(8)

3.46:
    A.
        01 23 45 76 89 AB CD EF     %rbx
        00 00 00 00 00 00 00 00     系统分配的16个字节
        00 00 00 00 00 00 00 00
        00 00 00 00 00 00 00 00     %rsp
    B.
        00 00 00 00 00 40 00 34       
        33 32 31 30 39 38 37 36     %rbx  
        35 34 33 32 31 30 39 38 
        37 36 35 34 33 32 31 30     %rsp

    C.  0x0000000000400034
    D.  %rbx
    E.  
        a.strlen()函数不会计算结尾的\0  
        b.未检查gets()返回是否为NULL.
    
3.47:
    A.  2^13
    B.  2^6

3.48:
    A.
        buf         v               金丝雀     
        %rsp        %rsp+24
        %rsp+16     %rsp+8          %rsp+40
    B.  因为可能溢出的变量为buf,如不重新排列这溢出超过v之后才能检测出.
        
3.49:
    A.
        %rax = 8 * n + 22;
        %rax &= 0xffffffff fffffff0
        %rsp = %rax
        确保分配的空间是16的倍数,并且至少超出数组p所需空间8个bit.
    B.
        %rax = %rsp + 7
        %rax /= 8
        %r8 = %rax * 8 = (%rsp + 7) / 8 * 8
        确保地址是8的整数倍
    C.
        n       s1          s2              p               e1              e2
        5       2065        2017            2024            1               7
        6       2064        2000            2000            16              0
    D.  s2-s1为16的整数倍   p: 8

3.50:
    fcvt2:
        movl        (%rdi), %eax        // %eax = *ip   int         i
        vmovss      (%rsi), %xmm0       // %xmm0 = *fp  float       f
        vcvttsd2si  (%rdx), %r8d        // %r8d = *dp   int         d
        movl        %r8d, (%rdi)        // *ip = d
        vcvtsi2ss   %eax, %xmm1, %xmm1  // %xmm1 = *ip  float       i
        vmovss      %xmm1, (%rsi)       // *fp = i
        vcvtsi2sdq  %rcx, %xmm1, %xmm1  // %xmm1 = l    double
        vmovsd      %xmm1, (%rdx)       // *dp = l
        vunpcklps   %xmm0, %xmm0, %xmm0
        vcvtps2pd   %xmm0, %xmm0
        ret
    
    double fcvt2(int *ip, float *fp, double *dp, longl) {
        int i = *ip;
        float f = *fp;
        double d = *dp;
        *ip = (int)d;
        *fp = (float)i;
        *dp = (double)l;
        return (double)f;
    }

3.51:
    Tx      Ty              exp
    double  int             vcvttsd2si %xmm0, %eax
    double  float           vcvtsd2ss %xmm0, %xmm0
    long    float           vcvtsi2ssq %rdi, %xmm0, %xmm0
    float   long            vcvttss2siq, %xmm0, %rax

3.52:
    A.
        a->%xmm0    b->%rdi     c->%xmm1    d->%esi
    B.
        a->%edi     b->%rsi     c->%rdx     d->%rcx
    C.
        a->%rdi     b->%xmm0    c->%esi     d->%xmm1
    D.
        a->%xmm0    b->%rdi     c->%xmm1    d->%xmm2

3.53:
    funct1:
        vcvtsi2ssq  %rsi, %xmm2, %xmm2      // convert long to float (第二个非浮点参数)
        vaddss      %xmm0, %xmm3, %xmm0     // %xmm0 = %xmm0 + (float)%rsi
        vcvtsi2ss   %edi, %xmm2, %xmm2      // convert int to float (第一个非浮点参数)      p
        vdivss      %xmm0, %xmm2, %xmm0     // %xmm0 = %xmm2 / %xmm0
        vcvtss2sd   %xmm0, %xmm0, %xmm0     // vonert float to double


    arg1_t      arg2_t      arg3_t      arg4_t
    int         long        float       double
    int         float       long        double

3.54:
    funct2:
        vcvtsi2ss   %edi, %xmm2, %xmm2      // convert int to float, %xmm2 = (float)x
        vmulss      %xmm1, %xmm2, %xmm1     // %xmm1 = (float)x*y
        vcvtss2sd   %xmm1, %xmm1, %xmm2     // %xmm2 = (double)((float)x*y)
        vcvtsi2sdq  %rsi, %xmm1, %xmm1      // convert long to double, %xmm1 = (double)z
        vdivsd      %xmm1, %xmm0, %xmm0     // %xmm0 = w/(dobule)z
        vsubsd      %xmm0, %xmm2, %xmm0     // %xmm0 = (double)((float)x*y) - w/(dobule)z

    return x*y - w/z;

3.55:
    low 4 bytes: 0x00000000
    high 4 bytes: 0x40400000
    指数段:0x404(1028),减去偏移1023 = 5
    数字段:0 + 1 = 1
    1 * 2^5 = 32

3.56:
    A.
        #define EXPR(x) x > 0 ? x : -x
    B.
        #define EXPR(x) x = 0.0
    C.
        #define EXPR(x) x = -x

3.57:
    funct3:
        vmovss      (%rdx), %xmm1           // %xmm1 = *dp
        vcvtsi2sd   (%rdi), %xmm2, %xmm2    // %xmm2 = (double)(*ap)
        vucomisd    %xmm2, %xmm0            // cmp b, %xmm2
        jbe         .L8                     // jmp .L8 if <=
        vcvtsi2ssq  %rsi, %xmm0, %xmm0      // %xmm0 = (float)c
        vmulss      %xmm1, %xmm0, %xmm1     // %xmm1 = (float)c * (*dp)
        vcvtss2sd   %xmm1, %xmm1, %xmm0     // convert to double
        ret
      .L8:
        vaddss      %xmm1, %xmm1, %xmm1     // %xmm1 = %xmm1 * 2
        vcvtsi2ssq  %rsi, %xmm0, %xmm0      // %xmm0 = (float)c
        vaddss      %xmm1, %xmm0, %xmm0     // %xmm0 = (float)c + 2 * (*dp)
        vcvtss2sd   %xmm0, %xmm0, %xmm0     // convert to double
        ret

    double funct3(int *ap, double b, long c, float *dp) {
        if (b > (double)(*ap)) {
            return (float)c * (*dp);
        } else {
            return (float)c + 2 * (*dp);
        }
    }

3.58:
    decoude2:
        subq    %rdx, %rsi      // y -= z
        imulq   %rsi, %rdi      // x *= y. x = x * (y - z)
        movq    %rsi, %rax      // %rax = y 
        salq    $63, %rax       // %rax <<= 63
        sarq    $63, %rax       // %rax >>= 63
        xorq    %rdi, %rax      // %rax ^ %rdi
        ret

    long decode2(long x, long y, long z) {
        if (y % 2 == 0) {
            return x * (y - z);
        } else {
            return ~(x * (y - z));
        }
    }

3.59:
    store_prod:
        movq    %rdx, %rax          // %rax = y
        cqto                        // convert y to 8 bytes, %rdx = yh, %rax = yl
        movq    %rsi, %rcx          // %rcx = x
        sarq    $63, %rcx           // %rcx = xh, %rsi = x
        imulq   %rax, %rcx          // %rcx = y * xh
        imulq   %rsi, %rdx          // %rdx = x * yh
        addq    %rdx, %rcx          // %rcx = yl * xh + xl * yh
        mulq    %rsi                // 
        addq    %rcx, %rdx
        movq    %rax, (%rdi)
        movq    %rdx, 8(%rdi)
        ret

3.60:
    long loop(long x, int n)
    x in %rdi, n in %esi
    loop:
        movl    %esi, %ecx      // %ecx = n
        movl    $1, %edx        // %edx = 1
        movl    $0, %eax        // %eax = 0
        jmp     .L2
    .L3:
        movq    %rdi, %r8       // %r8 = x
        andq    %rdx, %r8       // %r8 = %r8 & %rdx
        orq     %r8, %rax       // %rax = %r8
        salq    %cl, %rdx       // %rdx = %rdx << %rcx
    .L2:
        testq   %rdx, %rdx      // test %rdx
        jne     .L3             // if %rdx != 0 goto .L3
    rep; ret

    long loop(long x, int n) {
        long result = 0;
        long mask;
        for (mask = 1; mask != 0; mask = mask << n) {
            result |= x & mask;
        }
        return result;
    }
    A. 
        x -> %rdi
        n -> %esi
        result -> %rax
        mask -> %rdx
    B.
        result -> 0
        mask -> 1
    C.
        mask != 0
    D.
        mask = mask << n
    E.
        result |= x & mask;

3.62:
    long switch3(long *p1, long *p2, mode_t action) {
        long result = 0;
        switch(action) {
            case MODE_A:
                result = *p2;
                *p2 = *p1;
                break;
            case MODE_B:
                result = *p1 + *p2;
                *p1 = result;
                break;
            case MODE_C:
                *p1 = 59;
                result = *p2;
                break;
            case MODE_D:
                *p1 = *p2;
            case MODE_E:
                result = 27;
                break;
            default:
                result = 12;
        }
        return result;
    }

3.63:
    long switch_prob(long x, long n) {
        long result = x;
        switch(n) {
            case 60:
            case 62:
                result *= 8;
                break;
            case 63:
                result >>= 3;
                break;
            case 64:
                result *= 15;
                x = result;
            case 65:
                x = x * x;
                result = x + 0x4b;
                break;
        }
        return result;
    }
