2.2:
9       512         0x200
19      524288      0x80000
14      16384       0x4000
20      1048576     0x100000
17      131072      0x20000
5       32          0x20
7       128         0x80

2.3:
167     1010 0111   0xA7
62      0011 1110   0x3E
188     1011 1100   0xBC
55      0011 0111   0x37
136     1000 1000   0x88
243     1111 0011   0xF3
82      0101 0010   0x52
172     1010 1100   0xAC
231     1110 0111   0xE7

2.4:
0x503c+0x8=0x5044
0x503c-0x40=0x4ffc
0x503c+64=0x503c+0x40=0x507c
0x50ea-0x503c=0xae

2.5:
A.小端法:21             大端法:87
B.小端法:21 43          大端法:87 65
C.小端法:21 43 65       大端法:87 65 43

2.6:
A:
0000 0000 0011 0101 1001 0001 0100 0001
0100 1010 0101 0110 0100 0101 0000 0100
B:
00000000001101011001000101000001
           *********************
  01001010010101100100010100000100

21位相同
C:
前部

2.7:
 61 62 63 64 65 66

2.8:
a       0110 1001
b       0101 0101
~a      1001 0110
~b      1010 1010
a&b     0100 0001
a|b     0111 1101
a^b     0011 1100

2.9:
B:
蓝色 | 绿色 = 蓝绿色
黄色 & 蓝绿色 = 绿色
红色 ^ 红紫色 = 蓝色

2.10:
    *x      *y
0   a       b
1   a       a^b    
2   b       a^b 
3   b       a

2.11:
A: first -> k   last -> k
B: 因为first = last 任何数a^a = 0
C: for的条件判断改为first < last

2.12:
A: x&0xff
B: ((~x)&(~0xff))|(x&0xff) or x ^ ~0xFF
C: x|0xff

2.13:
bis: a | b
bic: a & ~b
exp. 
a = 1001 1010
b = 0110 1011
bic(a, b) = 1001 1001 & 1001 0100 = 1001 0000
bic(b, a) = 0110 1011 & 0110 0101 = 0110 0001
bis(bic(a, b), bic(b, a)) = 1111 0001
a ^ b = 1111 0001

a | b = bis(x, y)
a ^ b = bis(bic(x, y), bic(y, x))
// bic(bis(x, y), y)

2.14:
x = 0x66    y = 0x39
x = 0110 0110
y = 0011 1001
~x = 1001 1001
~y = 1100 0110
x & y = 0010 0000 = 0x20 = 32
x | y = 0111 1111 = 0x7f = 8 * 16 - 1 = 127
~x | ~y = 1101 1111 = 0xdf = 14 * 16 - 1 = 223
x & !y = 0
x && y = 0x1
x || y = 0x1
!x || !y = 0x0
x && ~y = 0x1

2.15:
int isEquals(int x, int y) {
    return !(x^y);
}

2.16:
x                       x << 3                  x >> 2(逻辑)             x >> 2(算术)
0xc3    [1100 0011]     0x18    [0001 1000]     0x30    [0011 0000]     0xf0    [1111 0000] 
0x75    [0111 0101]     0xa8    [1010 1000]     0x1d    [0001 1101]     0x1d    [0001 1101]
0x87    [1000 0111]     0x38    [0011 1000]     0x21    [0010 0001]     0xe1    [1110 0001]
0x66    [0110 0110]     0x30    [0011 0000]     0x19    [0001 1001]     0x19    [0001 1001]

2.17:
Hex     Bin             B2U4                    B2T4
0xE     [1110]          2^3+2^2+2^1=14          -2^3+2^2+2^1=-2
0x0     [0000]          0                       0
0x5     [0101]          2^2+2^0=5               2^2+2^0=5
0x8     [1000]          2^3=8                   -2^3=-8
0xD     [1101]          2^3+2^2+2^0=13          -2^3+2^2+2^0=-3
0xF     [1111]          2^3+2^2+2^1+2^0=15      -2^3+2^2+2^1+2^0=-1

2.18:
A.  0x2e0 = 2*16^2+14*16=256+124=736
B.  -0x58 = -(5*16+8)=-88
C.  0x28 = 2*16+8=40
D.  -0x30 = -3*16=-48
E.  0x78 = 7*16+8=120
F.  0x88 = 8*16+8=136
G.  0x1f8 = 1*256+15+128+8=2*256-8=504
H.  0xc0 = 12*16=192
I.  -0x48 = -(4*16+8)=-72

2.19:
x       bin             T2U4(x)
-8      [1000]          8
-3      [1101]          13
-2      [1110]          14
-1      [1111]          15
0       [0000]          0
5       [0101]          5

2.21:
-2147483647-1 == 2147483648U        无符号              1
-2147483647-1 < 2147483647          有符号              1
-2147483647-1U < 2147483647         无符号              0
-2147483647-1 < -2147483647         有符号              1
-2147483647-1U < -2147483647        无符号              1

2.22:
[1011] = -2^3+2^1+2^0 = -8+2+1 = -5
[11011] = -2^4+2^3+2^1+2^0 = -16+8+2+1 = -5
[111011] = -2^5+2^4+2^3+2^1+2^0 = -32+16+8+2+1 = -5

2.23:
w               fun1(w)                 fun2(w)
0x00000076      0x00000076              0x00000076
0x87654321      0x00000021              0x00000021
0x000000C9      0x000000C9              0xFFFFFFC9
0xEDCBA987      0x00000087              0xFFFFFF87

2.24:
0   0       0   0       0   0
2   2       2   2       2   2
9   1       9   1       -7  1
B   3       11  3       -5  3
F   7       15  7       -1  -1

2.25:
float sum_elements(float a[], unsigned length) {
    int i;
    float result = 0;
    for (i = 0; i < length; i++)
        result += a[i];
    return result;
}
length是unsigned类型当length=0时length-1会溢出得到UINT_MAX值。

2.26:
A.当参数1的字符串比参数2的字符串短的时候会产生不正确的结果。
B.strlen()返回值为unsigned int。
C.
    int strlonger(char *s, char *t) {
        return strlen(s) > strlen(t);
    }

2.27:
int uadd_ok(unsigned x, unsigned y) {
    return x + y >= x; 
}

2.28:
0           0               0           0
5           5               11          b
8           8               8           8
D           13              3           3             
F           15              1           1

2.45:
	小数值			二进制表示				十进制表示
	1/8				0.001					0.125
	3/4				0.11					0.75
	25/16			1.1001					1.5625
	171/16			1010.1011				10.6875
	9/8				1.001					1.125
	47/8			101.111					5.875
	1271/400		11.001011100001			3.1875

2-34:
bits		e	E 	2^E 	f		M		2^E*M	V		DEC
0 0000 000	0	-6	1/64	0/8		0/8		0/512	0		0
0 0000 001	0	-6	1/64	1/8		1/8		1/512	1/512	0.001953125
0 0000 111	0	-6	1/64	7/8		7/8		7/512	7/512	0.013671875

0 0001 000	1	-6	1/64	0/8		8/8		8/512	1/64	1/64
0 1110 111	14	7	128		7/8		15/8	1920/8 	240	 	240.0

2.47:
bits		e	E 	2^E 	f		M		2^E*M	V		DEC
0 00 00		0	0	1		0/4		0/4		0/4		0		0
0 00 01		0	0	1		1/4		1/4		1/4		1/4		0.25
0 00 11		0	0	1		3/4		3/4		3/4		3/4		0.75
0 01 00		1	0	1		0/4		4/4		4/4		1		1
0 01 01		1	0	1		1/4		5/4		5/4		5/4		1.25
0 10 11		2	1	2		3/4		7/4		14/4	7/2		3.5	
0 11 00												INF
0 11 11												NAN

2.48:
TYPE	DEC				HEX						BIN
int		3510593			0x00359141				00000000001101011001000101000001
														   *********************	 
float	3510593			0x4A564504				  01001010010101100100010100000100		

2.49:
A.2^(n+1) + 1
B.16777217
